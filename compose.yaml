# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    environment:
      NGINX_ENTRYPOINT_QUIET_LOGS: 1
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    depends_on:
      - server
      - client-user
      - client-contributor
    networks:
      - app-network
  server:
    container_name: server
    build:
      context: ./server
    restart: always
    init: true
    stdin_open: true
    tty: true
    environment:
      NODE_ENV: production
    depends_on:
      - mongodb
      - postgres-db
      - redis
      - cpp
      - java
      - typescript
      - python
    volumes:
      - ./server:/home/coderacer/server/
    # develop:
    #   watch:
    #     - path: ./package.json
    #       action: rebuild
    #     - path: ./server
    #       target: /usr/src/app
    #       action: sync
    networks:
      - app-network
  cpp:
    build: 
      context: ./server/dockerfiles
      dockerfile: Dockerfile.cpp
    container_name: cpp_env
    tty: true
    networks:
      - app-network

  java:
    build: 
      context: ./server/dockerfiles
      dockerfile: Dockerfile.java
    container_name: java_env
    tty: true
    networks:
      - app-network

  typescript:
    build: 
      context: ./server/dockerfiles
      dockerfile: Dockerfile.typescript
    container_name: js_env
    tty: true
    networks:
      - app-network

  python:
    build: 
      context: ./server/dockerfiles
      dockerfile: Dockerfile.python
    container_name: python_env
    tty: true
    networks:
      - app-network

  client-user:
    container_name: client-user
    build:
      context: ./client/user
      dockerfile: Dockerfile.local
    environment:
      NODE_ENV: production
    restart: always
    init: true
    stdin_open: true
    tty: true
    command: npm run dev
    # volumes:
    #   - .:/src
    volumes:
      - ./client/user:/home/coderacer/client/user/
    # develop:
    #   watch:
    #     - path: ./client/user/package.json
    #       action: rebuild
    #     - path: ./client/user
    #       target: /usr/src/app
    #       action: sync
    networks:
      - app-network
  client-contributor:
    container_name: client-contributor
    build:
      context: ./client/contributor
      dockerfile: Dockerfile.local
    environment:
      NODE_ENV: production
    command: npm run dev
    # volumes:
    #   - .:/src
    restart: always
    init: true
    stdin_open: true
    tty: true
    volumes:
      - ./client/contributor:/home/coderacer/client/contributor
    # develop:
    #   watch:
    #     - path: ./client/contributor/package.json
    #       action: rebuild
    #     - path: ./client/contributor
    #       target: /usr/src/app
    #       action: sync
    networks:
      - app-network

  mongodb:
    image: mongo
    ports:
      - '27017:27017'
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - db-code:/data/db
    networks:
      - app-network

  postgres-db:
    image: postgres:14-alpine
    container_name: postgresql
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=S3cret
      - POSTGRES_USER=citizix_user
      - POSTGRES_DB=citizix_db
    networks:
      - app-network
  
  # redis:
  #   build:
  #     context: ./server/dockerfiles
  #     dockerfile: Dockerfile.rebloom
  #   ports:
  #     - '6379:6379'
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 5
  redis:
    image: redis/redis-stack-server:latest
    container_name: redis-stack
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      # - ~/apps/redis:/root/redis
      # - ~/apps/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    # environment:
    #   - REDIS_USERNAME=username
    #   - REDIS_PASSWORD=password
    #   - REDIS_PORT=6379
    #   - REDIS_DATABASES=16
    networks:
      - app-network
  # redis:
  #     image: redis:latest
  #     healthcheck:
  #       test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
  #       interval: 1s
  #       timeout: 3s
  #       retries: 5
  #     command: ["redis-server"]
  #   # image: redis:latest
  #   # restart: always
  #   # ports:
  #   #   - "6379:6379"
  #   # volumes:



volumes:
  db-sub:
  db-code:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    



